generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://zxdbf:20011113XSZxsz.@117.72.49.27:6480/big-egg"
}

// System User Model
model SysUser {
  id                String            @id @map("id")
  username          String            @unique
  password          String
  salt              String
  email             String            @unique
  nickname          String?
  avatar            String?
  phoneNumber       String?           @map("phone_number")
  enabled           Boolean?          @default(true)
  loginFailCount    Int?              @default(0) @map("login_fail_count")
  lastLoginTime     DateTime?         @map("last_login_time")
  lastLoginIp       String?           @map("last_login_ip")
  lastLoginDevice   String?           @map("last_login_device")
  createTime        DateTime          @map("create_time")
  updateTime        DateTime          @map("update_time")
  createBy          String?           @map("create_by")
  updateBy          String?           @map("update_by")
  security          SysUserSecurity?
  userRoles         SysUserRole[]
  loginHistory      SysLoginHistory[]
  accounts          Account[]
  categories        Category[]
  transactions      Transaction[]
  tags              Tag[]
  budgets           Budget[]
  userSettings      UserSetting?
  budgetAlerts      BudgetAlert[]

  @@map("sys_user")
  @@index([username], name: "idx_user_username")
  @@index([email], name: "idx_user_email")
}

model SysUserSecurity {
  userId               String  @id @map("user_id")
  maxLoginAttempts     Int?    @default(5) @map("max_login_attempts")
  twoFactorAuthEnabled Boolean? @default(false) @map("two_factor_auth_enabled")
  lastPasswordChange   DateTime? @map("last_password_change")
  user                 SysUser @relation(fields: [userId], references: [id])

  @@map("sys_user_security")
}

model SysLoginHistory {
  id           BigInt   @id @default(autoincrement())
  userId       String   @map("user_id")
  ipAddress    String   @map("ip_address")
  deviceType   String?  @map("device_type")
  loginTime    DateTime @map("login_time")
  success      Boolean
  failReason   String?  @map("fail_reason")
  user         SysUser  @relation(fields: [userId], references: [id])

  @@map("sys_login_history")
}

model SysRole {
  id          String          @id @map("id")
  name        String          @unique
  description String?
  enabled     Boolean?        @default(true)
  dataScope   String?         @map("data_scope") @default("SELF")
  createTime  DateTime        @map("create_time")
  updateTime  DateTime        @map("update_time")
  createBy    String?         @map("create_by")
  updateBy    String?         @map("update_by")
  userRoles   SysUserRole[]
  roleMenus   SysRoleMenu[]
  rolePermissions SysRolePermission[]

  @@map("sys_role")
  @@index([name], name: "idx_role_name")
}

model SysUserRole {
  userId     String   @map("user_id")
  roleId     String   @map("role_id")
  createTime DateTime @map("create_time")
  createBy   String?  @map("create_by")
  user       SysUser  @relation(fields: [userId], references: [id])
  role       SysRole  @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("sys_user_role")
}

model SysMenu {
  id         String        @id @map("id")
  name       String
  path       String        @unique
  component  String?
  icon       String?
  sort       Int?          @default(0)
  visible    Boolean?      @default(true)
  parentId   String?       @map("parent_id")
  createTime DateTime      @map("create_time")
  updateTime DateTime      @map("update_time")
  createBy   String?       @map("create_by")
  updateBy   String?       @map("update_by")
  roleMenus  SysRoleMenu[]

  @@map("sys_menu")
  @@index([path], name: "idx_menu_path")
  @@index([parentId], name: "idx_menu_parent")
}

model SysRoleMenu {
  roleId String  @map("role_id")
  menuId String  @map("menu_id")
  role   SysRole @relation(fields: [roleId], references: [id])
  menu   SysMenu @relation(fields: [menuId], references: [id])

  @@id([roleId, menuId])
  @@map("sys_role_menu")
}

model SysPermission {
  id           String               @id @map("id")
  code         String               @unique
  name         String
  description  String?
  type         String
  groupName    String?              @map("group_name")
  status       Boolean?             @default(true)
  path         String?
  icon         String?
  parentId     String?              @map("parent_id")
  sortOrder    Int?                 @default(0) @map("sort_order")
  createTime   DateTime             @map("create_time")
  updateTime   DateTime             @map("update_time")
  rolePermissions SysRolePermission[]

  @@map("sys_permission")
  @@index([code], name: "idx_permission_code")
  @@index([type], name: "idx_permission_type")
  @@index([parentId], name: "idx_permission_parent")
}

model SysRolePermission {
  roleId       String        @map("role_id")
  permissionId String        @map("permission_id")
  createTime   DateTime      @map("create_time")
  createBy     String?       @map("create_by")
  role         SysRole       @relation(fields: [roleId], references: [id])
  permission   SysPermission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("sys_role_permission")
}

model DomainEvent {
  id          String    @id @map("id")
  topic       String
  eventType   String    @map("event_type")
  eventData   String    @map("event_data") @db.Text
  timestamp   DateTime
  processed   Boolean?  @default(false)
  processTime DateTime? @map("process_time")

  @@map("domain_event")
  @@index([topic], name: "idx_event_topic")
  @@index([timestamp], name: "idx_event_timestamp")
  @@index([processed], name: "idx_event_processed")
}

// Finance Models
model Account {
  id              Int             @id @default(autoincrement())
  userId          String          @map("user_id")
  name            String
  type            String
  balance         Decimal         @default(0.00) @db.Decimal(12, 2)
  icon            String?
  color           String?
  isDefault       Boolean         @default(false) @map("is_default")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at")
  alertThreshold  Decimal?        @map("alert_threshold") @db.Decimal(19, 2)
  user            SysUser         @relation(fields: [userId], references: [id])
  transactions    Transaction[]
  userSettings    UserSetting[]
  budgetAlerts    BudgetAlert[]

  @@map("accounts")
  @@index([userId], name: "user_id")
}

model Category {
  id           String         @id @default(uuid()) 
  name         String
  type         CategoryType
  icon         String?
  color        String?
  parentId     String?        @map("parent_id")
  userId       String?        @map("user_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  parent       Category?      @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull)
  children     Category[]     @relation("CategoryToCategory")
  user         SysUser?       @relation(fields: [userId], references: [id])
  transactions Transaction[]
  budgets      Budget[]

  @@map("categories")
  @@index([parentId])
  @@index([userId])
}

enum CategoryType {
  expense
  income
  transfer

  @@map("enum_category_type")
}

model Transaction {
  id              String            @id @map("id")
  userId          String            @map("user_id")
  accountId       Int               @map("account_id")
  categoryId      String            @map("category_id")
  amount          Decimal           @db.Decimal(12, 2)
  type            TransactionType
  description     String?           @db.VarChar(255)
  transactionDate DateTime          @map("transaction_date")
  transactionTime DateTime?         @map("transaction_time") @db.Time
  location        String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @default(now()) @updatedAt @map("updated_at")
  user            SysUser           @relation(fields: [userId], references: [id])
  account         Account           @relation(fields: [accountId], references: [id])
  category        Category          @relation(fields: [categoryId], references: [id])
  tags            TransactionTag[]

  @@map("transactions")
  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([transactionDate])
}

enum TransactionType {
  expense
  income
  transfer

  @@map("enum_transaction_type")
}

model Tag {
  id           Int              @id @default(autoincrement())
  userId       String           @map("user_id")
  name         String
  color        String?
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at")
  transactions TransactionTag[]
  user         SysUser          @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@map("tags")
}

model TransactionTag {
  transactionId String      @map("transaction_id")
  tagId         Int         @map("tag_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([transactionId, tagId])
  @@map("transaction_tags")
}

model Budget {
  id                   Int           @id @default(autoincrement())
  userId               String        @map("user_id")
  categoryId           String?       @map("category_id")
  amount               Decimal       @db.Decimal(12, 2)
  period               BudgetPeriod  @default(monthly)
  startDate            DateTime      @map("start_date") @db.Date
  endDate              DateTime?     @map("end_date") @db.Date
  notificationThreshold Int?         @default(80) @map("notification_threshold")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @default(now()) @updatedAt @map("updated_at")
  user                 SysUser       @relation(fields: [userId], references: [id])
  category             Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("budgets")
  @@index([userId])
  @@index([categoryId])
}

enum BudgetPeriod {
  daily
  weekly
  monthly
  yearly

  @@map("enum_budget_period")
}

model UserSetting {
  id               Int      @id @default(autoincrement())
  userId           String   @unique @map("user_id")
  currency         String   @default("CNY") @db.VarChar(10)
  theme            String   @default("system") @db.VarChar(20)
  defaultAccountId Int?     @map("default_account_id")
  budgetNotification Boolean @default(true) @map("budget_notification")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
  user             SysUser  @relation(fields: [userId], references: [id])
  defaultAccount   Account? @relation(fields: [defaultAccountId], references: [id], onDelete: SetNull)

  @@map("user_settings")
  @@index([defaultAccountId])
}

model BudgetAlert {
  id             String   @id @map("id")
  userId         String   @map("user_id")
  accountId      Int      @map("account_id")
  message        String   @db.Text
  threshold      Decimal  @db.Decimal(19, 2)
  currentBalance Decimal  @map("current_balance") @db.Decimal(19, 2)
  status         String
  createdAt      DateTime @map("created_at")
  updatedAt      DateTime @map("updated_at")
  user           SysUser  @relation(fields: [userId], references: [id])
  account        Account  @relation(fields: [accountId], references: [id])

  @@map("budget_alert")
  @@index([userId], name: "idx_user_id")
  @@index([status], name: "idx_status")
}